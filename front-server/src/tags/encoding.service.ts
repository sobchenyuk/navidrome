import { Injectable } from '@nestjs/common';
import { DatabaseService, EncodingTask, CorruptedFile } from './database.service';
import { TagsService } from './tags.service';
import { EncodingTaskStatus } from './encoding-task-status.model';
import * as path from 'path';
import { parseFile } from 'music-metadata';
import * as NodeID3 from 'node-id3';
import * as iconv from 'iconv-lite';

@Injectable()
export class EncodingService {
  constructor(
    private readonly databaseService: DatabaseService,
    private readonly tagsService: TagsService,
  ) {}

  private readonly supportedExtensions = ['.mp3', '.flac'];
  private workers: Set<Promise<void>> = new Set();

  /**
   * –û—á–∏—â–∞–µ—Ç –ë–î –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
   */
  private async cleanupMissingFiles(): Promise<number> {
    console.log('üßπ Cleaning up missing files from database...');
    
    const allFiles = await this.databaseService.getAllAudioFiles(10000, 0);
    const musicPaths = this.getMusicPaths();
    const baseDir = Array.isArray(musicPaths) ? musicPaths[0] : musicPaths;
    
    let removedCount = 0;
    
    for (const file of allFiles) {
      const fullPath = path.join(baseDir, file.path);
      
      try {
        const fs = require('fs').promises;
        await fs.access(fullPath);
      } catch {
        // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –∏–∑ –ë–î
        await this.databaseService.deleteAudioFile(file.path);
        console.log(`üóëÔ∏è Removed missing file: ${file.path}`);
        removedCount++;
      }
    }
    
    console.log(`üßπ Cleanup complete: removed ${removedCount} missing files`);
    return removedCount;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç–∏ –∫ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–º –ø–∞–ø–∫–∞–º (–∫–æ–ø–∏—è –∏–∑ TagsService)
   */
  private getMusicPaths(): string[] {
    const raw = process.env.MUSIC_PATHS ?? process.env.MUSIC_PATH ?? '';

    if (!raw) return ['/music'];

    try {
      const parsed = JSON.parse(raw);
      if (Array.isArray(parsed)) return parsed;
    } catch (_) { /* –Ω–µ JSON */ }

    if (raw.includes(',')) {
      return raw.split(',').map(p => p.trim()).filter(Boolean);
    }

    return [raw.trim()];
  }

  /**
   * –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞–∫–æ–∑—è–±—Ä—ã –≤ —Ç–µ–∫—Å—Ç–µ
   */
  private detectCorruption(text: string | null | undefined): boolean {
    if (!text || typeof text !== 'string') return false;
    
    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã CP1251 –∫—Ä–∞–∫–æ–∑—è–±—Ä –≤ UTF-8
    // –î–∏–∞–ø–∞–∑–æ–Ω √Ä-√ø (0xC0-0xFF) —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ–Ω –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    const corruptionPattern = /[√Ä-√ø]/;
    return corruptionPattern.test(text);
  }

  /**
   * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ç–µ–∫—Å—Ç–∞ CP1251 -> UTF-8
   */
  private fixEncoding(text: string): string {
    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º UTF-8 –∫—Ä–∞–∫–æ–∑—è–±—Ä—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–∞–π—Ç—ã latin1
      const buffer = Buffer.from(text, 'latin1');
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–∞–∫ CP1251 —á–µ—Ä–µ–∑ iconv-lite
      const fixedText = iconv.decode(buffer, 'cp1251');
      console.log('Fixed encoding:', text, '->', fixedText);
      return fixedText;
    } catch (error) {
      console.error('Encoding fix error:', error);
      return text; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
  }

  /**
   * –°–∫–∞–Ω–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∞–∫–æ–∑—è–±—Ä –≤ —Ç–µ–≥–∞—Ö
   */
  private async scanFileForCorruption(filePath: string): Promise<string[]> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ–¥—Ö–æ–¥ –∫ –ø—É—Ç—è–º –∫–∞–∫ –≤ TagsService
      const musicPaths = this.getMusicPaths();
      const baseDir = Array.isArray(musicPaths) ? musicPaths[0] : musicPaths;
      const fullPath = path.join(baseDir, filePath);
      
      const metadata = await parseFile(fullPath);
      
      const corruptedFields: string[] = [];
      const fieldsToCheck = ['title', 'artist', 'album', 'albumartist', 'genre'];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–≥–∏ –≤–Ω—É—Ç—Ä–∏ —Ñ–∞–π–ª–∞
      for (const field of fieldsToCheck) {
        const value = metadata.common[field];
        const textValue = Array.isArray(value) ? value[0] : value;
        
        if (this.detectCorruption(textValue)) {
          corruptedFields.push(field);
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
      const fileName = path.basename(filePath);
      if (this.detectCorruption(fileName)) {
        corruptedFields.push('filename');
      }
      
      return corruptedFields;
    } catch (error) {
      console.error(`Error scanning file ${filePath}:`, error);
      return [];
    }
  }

  /**
   * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É –≤ —Ñ–∞–π–ª–µ
   */
  private async fixFileEncoding(filePath: string, corruptedFields: string[]): Promise<boolean> {
    try {
      const musicPaths = this.getMusicPaths();
      const baseDir = Array.isArray(musicPaths) ? musicPaths[0] : musicPaths;
      const fullPath = path.join(baseDir, filePath);
      const ext = path.extname(filePath).toLowerCase();
      
      let tagsFixed = false;
      let fileRenamed = false;
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –≤–Ω—É—Ç—Ä–∏ —Ñ–∞–π–ª–∞
      const tagFields = corruptedFields.filter(field => field !== 'filename');
      if (tagFields.length > 0) {
        if (ext === '.mp3') {
          tagsFixed = await this.fixMP3Encoding(fullPath, tagFields);
        } else if (ext === '.flac') {
          tagsFixed = await this.fixFLACEncoding(fullPath, tagFields);
        }
      }
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (corruptedFields.includes('filename')) {
        fileRenamed = await this.fixFileName(fullPath, filePath, baseDir);
      }
      
      return tagsFixed || fileRenamed;
    } catch (error) {
      console.error(`Error fixing file ${filePath}:`, error);
      return false;
    }
  }

  /**
   * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É –≤ MP3 —Ñ–∞–π–ª–µ
   */
  private async fixMP3Encoding(fullPath: string, corruptedFields: string[]): Promise<boolean> {
    try {
      const metadata = await parseFile(fullPath);
      const tags: any = {};
      
      for (const field of corruptedFields) {
        const value = metadata.common[field];
        const textValue = Array.isArray(value) ? value[0] : value;
        
        if (textValue && this.detectCorruption(textValue)) {
          const fixedValue = this.fixEncoding(textValue);
          
          // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –¥–ª—è node-id3
          switch (field) {
            case 'title':
              tags.title = fixedValue;
              break;
            case 'artist':
              tags.artist = fixedValue;
              break;
            case 'album':
              tags.album = fixedValue;
              break;
            case 'albumartist':
              tags.performerInfo = fixedValue;
              tags.TPE2 = fixedValue;
              break;
            case 'genre':
              tags.genre = fixedValue;
              break;
          }
        }
      }
      
      if (Object.keys(tags).length > 0) {
        const result = NodeID3.update(tags, fullPath);
        return !(result instanceof Error);
      }
      
      return true;
    } catch (error) {
      console.error('Error fixing MP3 encoding:', error);
      return false;
    }
  }

  /**
   * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É –≤ FLAC —Ñ–∞–π–ª–µ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
   */
  private async fixFLACEncoding(fullPath: string, corruptedFields: string[]): Promise<boolean> {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ flac-metadata2
    console.log('FLAC encoding fix not implemented yet');
    return false;
  }

  /**
   * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –≤ –Ω—ë–º –µ—Å—Ç—å –∫—Ä–∞–∫–æ–∑—è–±—Ä—ã
   */
  private async fixFileName(fullPath: string, relativePath: string, baseDir: string): Promise<boolean> {
    try {
      const fs = require('fs').promises;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      try {
        await fs.access(fullPath);
      } catch {
        console.log(`‚ö†Ô∏è File ${fullPath} not found, skipping rename`);
        return false;
      }
      
      const fileName = path.basename(fullPath);
      const dirPath = path.dirname(fullPath);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫—Ä–∞–∫–æ–∑—è–±—Ä—ã –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
      if (!this.detectCorruption(fileName)) {
        return false; // –ù–µ—Ç –∫—Ä–∞–∫–æ–∑—è–±—Ä
      }
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –≤ –∏–º–µ–Ω–∏
      const fixedFileName = this.fixEncoding(fileName);
      
      if (fixedFileName === fileName) {
        return false; // –ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      let finalFileName = fixedFileName;
      let counter = 1;
      let newFullPath = path.join(dirPath, finalFileName);
      
      while (true) {
        try {
          await fs.access(newFullPath);
          // –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è
          const ext = path.extname(fixedFileName);
          const nameWithoutExt = path.basename(fixedFileName, ext);
          finalFileName = `${nameWithoutExt} (${counter})${ext}`;
          newFullPath = path.join(dirPath, finalFileName);
          counter++;
        } catch {
          // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –∏–º—è
          break;
        }
      }
      
      // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
      await fs.rename(fullPath, newFullPath);
      
      console.log(`üìù Renamed file: ${fileName} -> ${finalFileName}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const newRelativePath = path.join(path.dirname(relativePath), finalFileName);
      await this.updateFilePathInDatabase(relativePath, newRelativePath);
      
      return true;
    } catch (error) {
      console.error(`Error fixing filename for ${fullPath}:`, error);
      return false;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  private async updateFilePathInDatabase(oldPath: string, newPath: string): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å
      const allFiles = await this.databaseService.getAllAudioFiles(10000, 0);
      const fileToUpdate = allFiles.find(f => f.path === oldPath);
      
      if (fileToUpdate) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
        await this.databaseService.deleteAudioFile(oldPath);
        await this.databaseService.insertAudioFile(newPath);
        console.log(`üìã Updated database: ${oldPath} -> ${newPath}`);
      }
    } catch (error) {
      console.error('Error updating file path in database:', error);
    }
  }

  /**
   * Worker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
   */
  private async processFiles(taskId: number): Promise<void> {
    while (true) {
      // –ê—Ç–æ–º–∞—Ä–Ω–æ –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª
      const file = await this.databaseService.getNextUnprocessedFile(taskId);
      
      if (!file) {
        break; // –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      }
      
      try {
        const corruptedFields = JSON.parse(file.corrupted_fields);
        const success = await this.fixFileEncoding(file.file_path, corruptedFields);
        
        if (success) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
          const task = await this.databaseService.getActiveEncodingTask();
          if (task) {
            await this.databaseService.updateEncodingTask(task.id!, {
              processed_files: task.processed_files + 1
            });
          }
        }
      } catch (error) {
        console.error(`Error processing file ${file.file_path}:`, error);
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 50));
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏
   */
  async startEncodingFix(): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
      const existingTask = await this.databaseService.getActiveEncodingTask();
      if (existingTask) {
        if (existingTask.status === 'pending') {
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É
          await this.databaseService.updateEncodingTask(existingTask.id!, { status: 'running' });
          this.startWorkers(existingTask.id!);
          return true;
        } else if (existingTask.status === 'running') {
          // –ó–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
          return true;
        }
      }
      
      // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –º–µ—Ä—Ç–≤—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î
      await this.cleanupMissingFiles();
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
      const taskId = await this.databaseService.createEncodingTask();
      await this.databaseService.updateEncodingTask(taskId, { status: 'running' });
      
      // –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∞–∫–æ–∑—è–±—Ä
      const foundCount = await this.scanForCorruptedFiles(taskId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      if (foundCount === 0) {
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã UI —É—Å–ø–µ–ª –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await this.databaseService.updateEncodingTask(taskId, { status: 'no_files' });
        console.log('üö® No files with encoding issues found');
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ (–¥–∞—ë–º –≤—Ä–µ–º—è UI –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
        setTimeout(async () => {
          await this.databaseService.clearCorruptedFiles(taskId);
          await this.databaseService.deleteCompletedEncodingTasks();
        }, 10000);
        
        return true;
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º worker'—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      this.startWorkers(taskId);
      
      return true;
    } catch (error) {
      console.error('Error starting encoding fix:', error);
      return false;
    }
  }

  /**
   * –°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –Ω–∞—Ö–æ–¥–∏—Ç —Ç–µ, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫—Ä–∞–∫–æ–∑—è–±—Ä—ã
   */
  private async scanForCorruptedFiles(taskId: number): Promise<number> {
    const allFiles = await this.databaseService.getAllAudioFiles(10000, 0); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    let foundCount = 0;
    let scannedCount = 0;
    
    console.log(`üîç Starting scan of ${allFiles.length} total files`);
    
    for (const audioFile of allFiles) {
      const ext = path.extname(audioFile.path).toLowerCase();
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
      if (!this.supportedExtensions.includes(ext)) {
        continue;
      }
      
      scannedCount++;
      
      const corruptedFields = await this.scanFileForCorruption(audioFile.path);
      
      if (corruptedFields.length > 0) {
        await this.databaseService.insertCorruptedFile(taskId, audioFile.path, corruptedFields);
        foundCount++;
        console.log(`üêõ Found corrupted file: ${audioFile.path}, fields: ${corruptedFields.join(', ')}`);
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —Ñ–∞–π–ª–æ–≤
      if (scannedCount % 100 === 0) {
        console.log(`üîç Scanned ${scannedCount} supported files, found ${foundCount} with issues`);
      }
    }
    
    console.log(`üîç Scan complete: ${scannedCount} files scanned, ${foundCount} files with encoding issues`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    await this.databaseService.updateEncodingTask(taskId, { found_files: foundCount });
    
    return foundCount;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç 2 worker'–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  private startWorkers(taskId: number): void {
    // –ó–∞–ø—É—Å–∫–∞–µ–º 2 worker'–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    for (let i = 0; i < 2; i++) {
      const workerPromise = this.processFiles(taskId)
        .then(() => this.checkTaskCompletion(taskId))
        .catch(error => console.error(`Worker ${i + 1} error:`, error))
        .finally(() => this.workers.delete(workerPromise));
      
      this.workers.add(workerPromise);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
   */
  private async checkTaskCompletion(taskId: number): Promise<void> {
    const task = await this.databaseService.getActiveEncodingTask();
    
    if (task && task.found_files === task.processed_files) {
      // –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      await this.databaseService.updateEncodingTask(taskId, { status: 'completed' });
      
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ (–¥–ª—è UI)
      setTimeout(async () => {
        await this.databaseService.clearCorruptedFiles(taskId);
        await this.databaseService.deleteCompletedEncodingTasks();
      }, 5000);
      
      console.log('‚úÖ Encoding fix completed');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
   */
  async getEncodingTaskStatus(): Promise<EncodingTaskStatus | null> {
    const task = await this.databaseService.getActiveEncodingTask();
    
    if (!task) {
      return null;
    }
    
    return {
      found: task.found_files,
      processed: task.processed_files,
      status: task.status,
    };
  }
}
