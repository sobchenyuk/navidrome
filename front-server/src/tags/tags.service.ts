import { Injectable } from '@nestjs/common';
import { Track } from './track.model';
import { TagInput } from './tag.input';
import * as path from 'path';
import * as fs from 'fs/promises';
import { parseFile } from 'music-metadata';
import * as NodeID3 from 'node-id3';
import { createHash } from 'crypto';

@Injectable()
export class TagsService {
  private readonly musicPaths: string[] = (() => {
    const raw = process.env.MUSIC_PATHS ?? process.env.MUSIC_PATH ?? ''; // ‚Üê –ª–∏—à–∞—î–º–æ –π —Å–∫–æ—Ä–æ—á–µ–Ω—É –Ω–∞–∑–≤—É

    if (!raw) return ['/music'];               // –¥–µ—Ñ–æ–ª—Ç

    // 1) —Å–ø—Ä–æ–±–∞ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ —è–∫ JSON
    try {
      const parsed = JSON.parse(raw);
      if (Array.isArray(parsed)) return parsed;
    } catch (_) { /* –Ω–µ JSON */ }

    // 2) —è–∫—â–æ —î –∫–æ–º–∞ ‚Üí —Å–ø–ª—ñ—Ç–∏–º–æ
    if (raw.includes(',')) {
      return raw.split(',').map(p => p.trim()).filter(Boolean);
    }

    // 3) —ñ–Ω–∞–∫—à–µ ‚Äì –æ–¥–∏–Ω —à–ª—è—Ö
    return [raw.trim()];
  })();
  private readonly supportedExtensions = ['.mp3', '.flac', '.ogg', '.m4a', '.mp4', '.aac', '.wma'];

  private generateTrackId(filePath: string): string {
    return createHash('md5').update(filePath).digest('hex');
  }

  private async scanDirectory(dirPath: string): Promise<string[]> {
    const audioFiles: string[] = [];

    try {
      const items = await fs.readdir(dirPath, { withFileTypes: true });

      for (const item of items) {
        const fullPath = path.join(dirPath, item.name);

        if (item.isDirectory()) {
          // Recursively scan subdirectories
          const subFiles = await this.scanDirectory(fullPath);
          audioFiles.push(...subFiles);
        } else if (item.isFile()) {
          // Check if file has supported audio extension
          const ext = path.extname(item.name).toLowerCase();
          if (this.supportedExtensions.includes(ext)) {
            audioFiles.push(fullPath);
          }
        }
      }
    } catch (error) {
      console.error(`Error scanning directory ${dirPath}:`, error);
    }

    return audioFiles;
  }

  private async readMetadata(filePath: string): Promise<Track | null> {
    try {
      // üîç –í–∏–∑–Ω–∞—á–∞—î–º–æ, –≤—ñ–¥–Ω–æ—Å–Ω–æ —è–∫–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥—É –±—É–¥—É–≤–∞—Ç–∏ —à–ª—è—Ö
      const baseDir = Array.isArray(this.musicPaths)
        ? this.musicPaths.find(p => filePath.startsWith(p))      // –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑ –ø–æ—Ç–æ—á–Ω–∏–º —Ñ–∞–π–ª–æ–º
        ?? this.musicPaths[0]                                  // fallback ‚Äî –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç
        : this.musicPaths;                                       // –æ–¥–∏–Ω–æ—á–Ω–∏–π —Ä—è–¥–æ–∫

      const relativePath = path.relative(baseDir, filePath);

      const metadata = await parseFile(filePath);

      // üñºÔ∏è –í–∏—Ç—è–≥—É—î–º–æ –æ–±–∫–ª–∞–¥–∏–Ω–∫—É, —è–∫—â–æ —î
      let cover: string | undefined;
      if (metadata.common.picture?.length) {
        const pic = metadata.common.picture[0];
        cover = `data:${pic.format};base64,${Buffer.from(pic.data).toString('base64')}`;
      }

      const track: Track = {
        id: this.generateTrackId(relativePath),
        path: relativePath,
        title: metadata.common.title || undefined,
        artist: metadata.common.artist || undefined,
        albumArtist: metadata.common.albumartist || metadata.common.artist || undefined,
        album: metadata.common.album || undefined,
        year: metadata.common.year || undefined,
        trackNumber: metadata.common.track?.no || undefined,
        genre: metadata.common.genre?.[0] || undefined,
        cover,
      };

      return track;
    } catch (err) {
      console.error(`Error reading metadata for ${filePath}:`, err);
      return null;
    }
  }

  // Mock data for development - will be replaced with real metadata reading
  private mockTracks: Track[] = [
    {
      id: '1',
      path: 'Library/Audiobook_Rus_200_017.mp3',
      title: 'Chapter 17',
      artist: 'John Smith',
      albumArtist: 'John Smith',
      album: 'Russian Stories',
      genre: 'Audiobook',
      trackNumber: 17,
      year: 2020,
    },
    {
      id: '2',
      path: 'Library/Audiobook_Rus_200_018.mp3',
      title: 'Chapter 18',
      artist: 'John Smith',
      albumArtist: 'John Smith',
      album: 'Russian Stories',
      genre: 'Audiobook',
      trackNumber: 18,
      year: 2020,
    },
    // Add more mock data as needed
  ];

  async findAll(searchPath?: string): Promise<Track[]> {
    try {
      console.log('üîç Scanning for audio files...');

      // 1Ô∏è‚É£ –ú–∞—Å–∏–≤ –±–∞–∑–æ–≤–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
      const baseDirs = Array.isArray(this.musicPaths)
        ? this.musicPaths
        : [this.musicPaths];

      // 2Ô∏è‚É£ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, —è–∫—ñ —Ä–µ–∞–ª—å–Ω–æ —Å–∫–∞–Ω—É–≤–∞—Ç–∏–º–µ–º–æ
      const dirsToScan = baseDirs.map(dir =>
        searchPath ? path.join(dir, searchPath) : dir,
      );

      // 3Ô∏è‚É£ –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤—É—î–º–æ —Ç—ñ, —â–æ —ñ—Å–Ω—É—é—Ç—å
      const validDirs: string[] = [];
      for (const dir of dirsToScan) {
        try {
          await fs.access(dir);
          validDirs.push(dir);
        } catch {
          console.warn(`Music directory not found: ${dir}`);
        }
      }
      if (validDirs.length === 0) return [];

      // 4Ô∏è‚É£ –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –∞—É–¥—ñ–æ—Ñ–∞–π–ª–∏ –∑ –∫–æ–∂–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
      let audioFiles: string[] = [];
      for (const dir of validDirs) {
        const files = await this.scanDirectory(dir);
        audioFiles = audioFiles.concat(files);
      }
      console.log(`üìÅ Found ${audioFiles.length} audio files`);

      if (!audioFiles.length) return [];

      // 5Ô∏è‚É£ –ß–∏—Ç–∞—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ (–æ–±–º–µ–∂–∏–º–æ—Å—è –ø–µ—Ä—à–∏–º–∏ 50 –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ)
      const tracks: Track[] = [];
      for (const file of audioFiles.slice(0, 50)) {
        const track = await this.readMetadata(file);
        if (track) tracks.push(track);
      }

      console.log(`üéµ Successfully loaded ${tracks.length} tracks`);
      return tracks;
    } catch (err) {
      console.error('Error in findAll:', err);
      return [];
    }
  }

  async findOne(filePath: string): Promise<Track | null> {
    try {
      // –í–∏–∑–Ω–∞—á–∞—î–º–æ, –∑ —è–∫–æ—ó –±–∞–∑–æ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Å–∫–ª–∞–¥–∞—Ç–∏ –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö
      const baseDir = Array.isArray(this.musicPaths)
        ? this.musicPaths.find(p => filePath.startsWith(p))      // —è–∫—â–æ –ø—Ä–∏–π—à–æ–≤ –ø–æ–≤–Ω–∏–π —à–ª—è—Ö
        ?? this.musicPaths[0]                                  // fallback
        : this.musicPaths;                                       // –æ–¥–∏–Ω–æ—á–Ω–∏–π —à–ª—è—Ö

      const fullPath = path.isAbsolute(filePath)
        ? filePath                       // —è–∫—â–æ –≤–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω–∏–π
        : path.join(baseDir, filePath);  // —Ä–æ–±–∏–º–æ –∞–±—Å–æ–ª—é—Ç–Ω–∏–º

      return await this.readMetadata(fullPath);
    } catch (err) {
      console.error(`Error reading single track ${filePath}:`, err);
      return null;
    }
  }

  async updateTags(filePath: string, tagInput: TagInput): Promise<boolean> {
    try {
      // 1Ô∏è‚É£ –û–±–∏—Ä–∞—î–º–æ –∫–æ—Ä—ñ–Ω—å
      const baseDir = Array.isArray(this.musicPaths)
        ? this.musicPaths.find(p => filePath.startsWith(p)) ?? this.musicPaths[0]
        : this.musicPaths;

      // 2Ô∏è‚É£ –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω–∏–π —à–ª—è—Ö
      const fullPath = path.isAbsolute(filePath)
        ? filePath
        : path.join(baseDir, filePath);

      const ext = path.extname(fullPath).toLowerCase();
      console.log(`üè∑Ô∏è Updating tags for ${fullPath}:`, tagInput);

      if (ext === '.mp3') {
        // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–≥—ñ–≤, –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤—É—î–º–æ undefined
        const tags = Object.fromEntries(
          Object.entries({
            title: tagInput.title,
            artist: tagInput.artist,
            albumArtist: tagInput.albumArtist,
            album: tagInput.album,
            year: tagInput.year?.toString(),
            trackNumber: tagInput.trackNumber?.toString(),
            genre: tagInput.genre,
          }).filter(([, v]) => v !== undefined),
        );

        const res = NodeID3.update(tags, fullPath);

        if (res instanceof Error) {
          console.error(`‚ùå Failed to update MP3 tags: ${res.message}`);
          return false;                          // <- —á–∏—Å—Ç–∏–π boolean
        }

        console.log('‚úÖ Successfully updated MP3 tags');
        return res;
      }

      console.log(`‚ö†Ô∏è Tag writing for ${ext} files not yet implemented`);
      return false;
    } catch (err) {
      console.error('Error updating tags:', err);
      return false;
    }
  }

  async uploadCover(filePath: string, coverData: Buffer): Promise<boolean> {
    try {
      // TODO: Implement cover upload using node-id3 or flac-metadata
      console.log(`Uploading cover for ${filePath}`);
      return true;
    } catch (error) {
      console.error('Error uploading cover:', error);
      return false;
    }
  }
}
