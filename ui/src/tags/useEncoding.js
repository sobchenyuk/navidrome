import { useState, useEffect, useCallback } from 'react';
import { useQuery, useMutation } from '@apollo/client';
import { FIX_ENCODING, GET_ENCODING_STATUS, INDEX_TRACKS } from './graphql/queries';

export const useEncoding = () => {
  const [isFixing, setIsFixing] = useState(false);
  const [showCompleteNotification, setShowCompleteNotification] = useState(false);
  const [showNoFilesNotification, setShowNoFilesNotification] = useState(false);
  const [pollingInterval, setPollingInterval] = useState(null);
  const [currentStatus, setCurrentStatus] = useState(null); // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [userInitiated, setUserInitiated] = useState(false); // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  // GraphQL –º—É—Ç–∞—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const [fixEncodingMutation] = useMutation(FIX_ENCODING, {
    errorPolicy: 'all',
  });
  
  // GraphQL –º—É—Ç–∞—Ü–∏—è –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
  const [indexTracksMutation] = useMutation(INDEX_TRACKS, {
    errorPolicy: 'all',
  });

  // GraphQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (–¥–ª—è polling)
  const { data: statusData, refetch: refetchStatus } = useQuery(GET_ENCODING_STATUS, {
    errorPolicy: 'all',
    skip: true, // –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ refetch
  });

  const encodingStatus = statusData?.encodingTaskStatus;

  // –§—É–Ω–∫—Ü–∏—è polling'–∞
  const pollStatus = useCallback(async () => {
    try {
      console.log('üîÑ Polling status...');
      const result = await refetchStatus();
      console.log('Polling result:', result.data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      if (result.data?.encodingTaskStatus) {
        setCurrentStatus(result.data.encodingTaskStatus);
      } else {
        setCurrentStatus(null);
      }
    } catch (error) {
      console.error('Error polling encoding status:', error);
    }
  }, [refetchStatus]);

  // –ó–∞–ø—É—Å–∫ polling'–∞
  const startPolling = useCallback(() => {
    if (pollingInterval) return; // –£–∂–µ –∑–∞–ø—É—â–µ–Ω

    const interval = setInterval(pollStatus, 3000); // –ö–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
    setPollingInterval(interval);
  }, [pollStatus, pollingInterval]);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling'–∞
  const stopPolling = useCallback(() => {
    if (pollingInterval) {
      clearInterval(pollingInterval);
      setPollingInterval(null);
    }
  }, [pollingInterval]);

  // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      stopPolling();
    };
  }, [stopPolling]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞
  useEffect(() => {
    console.log('Encoding status changed:', currentStatus, 'userInitiated:', userInitiated);
    
    if (!currentStatus) {
      setIsFixing(false);
      stopPolling();
      return;
    }

    const { status, found, processed } = currentStatus;
    console.log('Processing status:', status);

    if (status === 'running') {
      setIsFixing(true);
      setShowNoFilesNotification(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      setShowCompleteNotification(false);
      startPolling();
    } else if (status === 'completed' && userInitiated) {
      setIsFixing(false);
      setShowCompleteNotification(true);
      setShowNoFilesNotification(false);
      stopPolling();
      setUserInitiated(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
      if (processed > 0) {
        console.log('üîÑ Auto-starting reindexing after encoding fix...');
        setTimeout(async () => {
          try {
            await indexTracksMutation();
            console.log('‚úÖ Auto-reindexing completed');
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –ø—É—Ç–∏
            window.location.reload();
          } catch (error) {
            console.error('‚ùå Auto-reindexing failed:', error);
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            window.location.reload();
          }
        }, 2000); // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        setTimeout(() => {
          window.location.reload();
        }, 2000);
      }
      
      // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        setShowCompleteNotification(false);
      }, 3000);
    } else if (status === 'no_files' && userInitiated) {
      console.log('Setting showNoFilesNotification to true');
      setIsFixing(false);
      setShowNoFilesNotification(true);
      setShowCompleteNotification(false);
      stopPolling();
      setUserInitiated(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
      
      // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        setShowNoFilesNotification(false);
      }, 3000);
    } else {
      setIsFixing(false);
      stopPolling();
    }
  }, [currentStatus, userInitiated, startPolling, stopPolling]);

  // –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏
  const startEncodingFix = useCallback(async () => {
    try {
      console.log('üîÑ Starting encoding fix...');
      setIsFixing(true);
      setUserInitiated(true); // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ
      
      const result = await fixEncodingMutation();
      
      if (result.data?.fixEncoding) {
        console.log('‚úÖ Encoding fix started successfully');
        
        // –ù–∞—á–∏–Ω–∞–µ–º polling –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        startPolling();
        
        // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ —Å—Ä–∞–∑—É –∏ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        await pollStatus();
        setTimeout(pollStatus, 1000);
        
        return true;
      } else {
        console.error('‚ùå Failed to start encoding fix');
        setIsFixing(false);
        setUserInitiated(false);
        return false;
      }
    } catch (error) {
      console.error('‚ùå Error starting encoding fix:', error);
      setIsFixing(false);
      setUserInitiated(false);
      return false;
    }
  }, [fixEncodingMutation, startPolling, pollStatus]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏)
  useEffect(() => {
    pollStatus();
  }, [pollStatus]);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isFixing,
    encodingStatus: currentStatus || { found: 0, processed: 0, status: 'none' },
    showCompleteNotification,
    showNoFilesNotification,
    
    // –î–µ–π—Å—Ç–≤–∏—è
    startEncodingFix,
    
    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ç–æ–¥—ã (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    pollStatus,
    startPolling,
    stopPolling,
  };
};
