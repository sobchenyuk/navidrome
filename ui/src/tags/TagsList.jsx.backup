import { useState } from 'react'
import { useMediaQuery, withWidth } from '@material-ui/core'
import {
  Filter,
  SearchInput,
  TextField,
  usePermissions,
} from 'react-admin'
import {
  List,
  SongSimpleList,
  useResourceRefresh,
} from '../common'
import { 
  Box, 
  Typography, 
  Checkbox, 
  FormControlLabel, 
  Paper, 
  Collapse,
  Button,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  TableSortLabel,
  TablePagination,
  TextField as MuiTextField,
  InputAdornment,
  Select,
  MenuItem,
  FormControl,
  CircularProgress,
  Alert
} from '@material-ui/core'
import { ExpandMore, ExpandLess, Search } from '@material-ui/icons'

const genres = [
  'Alternative', 'Ambient', 'Audiobook', 'Blues', 'Britpop', 'Classical', 
  'Country', 'Disco', 'Electronic', 'Experimental', 'Folk', 'Funk', 
  'Gospel', 'Grunge', 'Hip-Hop', 'Indie', 'Jazz', 'Metal', 'New Wave', 
  'Pop', 'Post-Punk', 'Progressive', 'Psychedelic', 'Punk', 'R&B', 
  'Reggae', 'Rock', 'Soul', 'World'
]

const currentYear = new Date().getFullYear()
const years = Array.from({ length: currentYear - 1900 + 1 }, (_, i) => 1900 + i).reverse()

const TagsTable = ({ searchTerm, visibleColumns, tracks, loading, updateTrack }) => {
  const [order, setOrder] = useState('asc')
  const [orderBy, setOrderBy] = useState('title')
  const [page, setPage] = useState(0)
  const [rowsPerPage] = useState(25)
  const [editingCell, setEditingCell] = useState(null)

  const handleRequestSort = (property) => {
    const isAsc = orderBy === property && order === 'asc'
    setOrder(isAsc ? 'desc' : 'asc')
    setOrderBy(property)
  }

  const handleChangePage = (event, newPage) => {
    setPage(newPage)
  }

  const handleCellClick = (rowId, field) => {
    if (['albumArtist', 'artist', 'album', 'title', 'genre', 'trackNumber', 'year'].includes(field)) {
      setEditingCell({ rowId, field })
    }
  }

  const handleCellChange = async (trackPath, field, value) => {
    const success = await updateTrack(trackPath, field, value)
    if (!success) {
      // Could show error notification here
      console.error('Failed to update track')
    }
  }

  const handleCellBlur = () => {
    setEditingCell(null)
  }

  const renderEditableCell = (row, field, value) => {
    const isEditing = editingCell?.rowId === row.id && editingCell?.field === field
    
    if (!isEditing) {
      return (
        <span 
          onClick={() => handleCellClick(row.id, field)}
          style={{ cursor: 'pointer', minHeight: '20px', display: 'block' }}
        >
          {value || '\u00A0'}
        </span>
      )
    }

    if (field === 'genre') {
      return (
        <FormControl size="small" fullWidth>
          <Select
            value={value || ''}
            onChange={(e) => handleCellChange(row.path, field, e.target.value)}
            onBlur={handleCellBlur}
            autoFocus
          >
            {genres.map(genre => (
              <MenuItem key={genre} value={genre}>{genre}</MenuItem>
            ))}
          </Select>
        </FormControl>
      )
    }

    if (field === 'year') {
      return (
        <FormControl size="small" fullWidth>
          <Select
            value={value || ''}
            onChange={(e) => handleCellChange(row.path, field, e.target.value)}
            onBlur={handleCellBlur}
            autoFocus
          >
            {years.map(year => (
              <MenuItem key={year} value={year.toString()}>{year}</MenuItem>
            ))}
          </Select>
        </FormControl>
      )
    }

    // For trackNumber, use smaller width
    const fieldProps = field === 'trackNumber' 
      ? { size: "small", style: { width: '60px' } }
      : { size: "small", fullWidth: true }

    return (
      <MuiTextField
        {...fieldProps}
        value={value || ''}
        onChange={(e) => handleCellChange(row.path, field, e.target.value)}
        onBlur={handleCellBlur}
        autoFocus
      />
    )
  }

  // Filter data based on search term
  const filteredData = tracks.filter(row => {
    if (!searchTerm) return true
    const searchLower = searchTerm.toLowerCase()
    return (
      (row.path || '').toLowerCase().includes(searchLower) ||
      (row.title || '').toLowerCase().includes(searchLower) ||
      (row.artist || '').toLowerCase().includes(searchLower) ||
      (row.albumArtist || '').toLowerCase().includes(searchLower) ||
      (row.album || '').toLowerCase().includes(searchLower) ||
      (row.genre || '').toLowerCase().includes(searchLower) ||
      (row.year || '').toString().toLowerCase().includes(searchLower) ||
      (row.trackNumber || '').toString().toLowerCase().includes(searchLower)
    )
  })

  const sortedData = [...filteredData].sort((a, b) => {
    let aValue = a[orderBy] || ''
    let bValue = b[orderBy] || ''
    
    // Handle numeric sorting for trackNumber and year
    if (orderBy === 'trackNumber' || orderBy === 'year') {
      aValue = parseInt(aValue) || 0
      bValue = parseInt(bValue) || 0
    }
    
    if (order === 'asc') {
      return aValue < bValue ? -1 : aValue > bValue ? 1 : 0
    } else {
      return aValue > bValue ? -1 : aValue < bValue ? 1 : 0
    }
  })

  const paginatedData = sortedData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)

  const createSortHandler = (property) => () => {
    handleRequestSort(property)
  }

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" p={4}>
        <CircularProgress />
      </Box>
    )
  }

  return (
    <Paper>
      <Table>
        <TableHead>
          <TableRow>
            <TableCell>Folder</TableCell>
            <TableCell>
              <TableSortLabel
                active={orderBy === 'path'}
                direction={orderBy === 'path' ? order : 'asc'}
                onClick={createSortHandler('path')}
              >
                File
              </TableSortLabel>
            </TableCell>
            {visibleColumns.albumArtist && (
              <TableCell>
                <TableSortLabel
                  active={orderBy === 'albumArtist'}
                  direction={orderBy === 'albumArtist' ? order : 'asc'}
                  onClick={createSortHandler('albumArtist')}
                >
                  Album Artist
                </TableSortLabel>
              </TableCell>
            )}
            {visibleColumns.albumName && (
              <TableCell>
                <TableSortLabel
                  active={orderBy === 'album'}
                  direction={orderBy === 'album' ? order : 'asc'}
                  onClick={createSortHandler('album')}
                >
                  Album Name
                </TableSortLabel>
              </TableCell>
            )}
            {visibleColumns.artist && (
              <TableCell>
                <TableSortLabel
                  active={orderBy === 'artist'}
                  direction={orderBy === 'artist' ? order : 'asc'}
                  onClick={createSortHandler('artist')}
                >
                  Artist
                </TableSortLabel>
              </TableCell>
            )}
            {visibleColumns.genre && (
              <TableCell>
                <TableSortLabel
                  active={orderBy === 'genre'}
                  direction={orderBy === 'genre' ? order : 'asc'}
                  onClick={createSortHandler('genre')}
                >
                  Genre
                </TableSortLabel>
              </TableCell>
            )}
            {visibleColumns.trackName && (
              <TableCell>
                <TableSortLabel
                  active={orderBy === 'title'}
                  direction={orderBy === 'title' ? order : 'asc'}
                  onClick={createSortHandler('title')}
                >
                  Track Name
                </TableSortLabel>
              </TableCell>
            )}
            {visibleColumns.trackNumber && (
              <TableCell style={{ width: '80px' }}>
                <TableSortLabel
                  active={orderBy === 'trackNumber'}
                  direction={orderBy === 'trackNumber' ? order : 'asc'}
                  onClick={createSortHandler('trackNumber')}
                >
                  #
                </TableSortLabel>
              </TableCell>
            )}
            {visibleColumns.year && (
              <TableCell>
                <TableSortLabel
                  active={orderBy === 'year'}
                  direction={orderBy === 'year' ? order : 'asc'}
                  onClick={createSortHandler('year')}
                >
                  Year
                </TableSortLabel>
              </TableCell>
            )}
          </TableRow>
        </TableHead>
        <TableBody>
          {paginatedData.map((row) => (
            <TableRow key={row.id}>
              <TableCell>{row.path?.substring(0, row.path.lastIndexOf('/')) || ''}</TableCell>
              <TableCell>{row.path?.substring(row.path.lastIndexOf('/') + 1) || ''}</TableCell>
              {visibleColumns.albumArtist && (
                <TableCell>
                  {renderEditableCell(row, 'albumArtist', row.albumArtist)}
                </TableCell>
              )}
              {visibleColumns.albumName && (
                <TableCell>
                  {renderEditableCell(row, 'album', row.album)}
                </TableCell>
              )}
              {visibleColumns.artist && (
                <TableCell>
                  {renderEditableCell(row, 'artist', row.artist)}
                </TableCell>
              )}
              {visibleColumns.genre && (
                <TableCell>
                  {renderEditableCell(row, 'genre', row.genre)}
                </TableCell>
              )}
              {visibleColumns.trackName && (
                <TableCell>
                  {renderEditableCell(row, 'title', row.title)}
                </TableCell>
              )}
              {visibleColumns.trackNumber && (
                <TableCell style={{ width: '80px' }}>
                  {renderEditableCell(row, 'trackNumber', row.trackNumber)}
                </TableCell>
              )}
              {visibleColumns.year && (
                <TableCell>
                  {renderEditableCell(row, 'year', row.year)}
                </TableCell>
              )}
            </TableRow>
          ))}
        </TableBody>
      </Table>
      <TablePagination
        rowsPerPageOptions={[25]}
        component="div"
        count={filteredData.length}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={handleChangePage}
      />
    </Paper>
  )
}

const TagsList = (props) => {
  const [expanded, setExpanded] = useState(false)
  const [searchTerm, setSearchTerm] = useState('')
  const [visibleColumns, setVisibleColumns] = useState({
    albumArtist: true,
    albumName: true,
    artist: true,
    genre: true,
    trackName: true,
    trackNumber: true,
    year: false
  })
  
  const isXsmall = useMediaQuery((theme) => theme.breakpoints.down('xs'))
  const isDesktop = useMediaQuery((theme) => theme.breakpoints.up('md'))
  const { permissions } = usePermissions()

  const handleExpandClick = () => {
    setExpanded(!expanded)
  }

  const handleSearchChange = (event) => {
    setSearchTerm(event.target.value)
  }

  const handleColumnToggle = (column) => (event) => {
    setVisibleColumns(prev => ({
      ...prev,
      [column]: event.target.checked
    }))
  }

  // Mock data for now - will be replaced with useTracks hook
  const mockTracks = [
    { id: '1', path: 'Library/Audiobook_Rus_200_017.mp3', title: 'Chapter 17', artist: 'John Smith', albumArtist: 'John Smith', album: 'Russian Stories', genre: 'Audiobook', trackNumber: 17, year: 2020 },
    { id: '2', path: 'Library/Audiobook_Rus_200_018.mp3', title: 'Chapter 18', artist: 'John Smith', albumArtist: 'John Smith', album: 'Russian Stories', genre: 'Audiobook', trackNumber: 18, year: 2020 },
  ]

  const dummyUpdateTrack = async (path, field, value) => {
    console.log(`Would update ${path} field ${field} to ${value}`)
    return true
  }

  return (
    <>
      {/* Column chooser section */}
      <Box sx={{ mb: 2, p: 2 }}>
        <Button 
          onClick={handleExpandClick} 
          endIcon={expanded ? <ExpandLess /> : <ExpandMore />}
        >
          Choose columns
        </Button>

        {/* Column chooser - collapsible */}
        <Collapse in={expanded}>
          <Box sx={{ mt: 2 }}>
            <Typography variant="subtitle1" sx={{ mb: 1 }}>
              Common tags
            </Typography>
            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
              <FormControlLabel
                control={<Checkbox checked={visibleColumns.albumArtist} onChange={handleColumnToggle('albumArtist')} />}
                label="Album Artist"
              />
              <FormControlLabel
                control={<Checkbox checked={visibleColumns.albumName} onChange={handleColumnToggle('albumName')} />}
                label="Album Name"
              />
              <FormControlLabel
                control={<Checkbox checked={visibleColumns.artist} onChange={handleColumnToggle('artist')} />}
                label="Artist"
              />
              <FormControlLabel
                control={<Checkbox checked={visibleColumns.genre} onChange={handleColumnToggle('genre')} />}
                label="Genre"
              />
              <FormControlLabel
                control={<Checkbox checked={visibleColumns.trackName} onChange={handleColumnToggle('trackName')} />}
                label="Track Name"
              />
              <FormControlLabel
                control={<Checkbox checked={visibleColumns.trackNumber} onChange={handleColumnToggle('trackNumber')} />}
                label="Track Number"
              />
              <FormControlLabel
                control={<Checkbox checked={visibleColumns.year} onChange={handleColumnToggle('year')} />}
                label="Year"
              />
            </Box>
          </Box>
        </Collapse>
      </Box>

      {/* Search */}
      <Box sx={{ mb: 2, p: 2 }}>
        <MuiTextField
          fullWidth
          placeholder="Search for tags"
          value={searchTerm}
          onChange={handleSearchChange}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <Search />
              </InputAdornment>
            ),
          }}
        />
      </Box>

      {/* Table */}
      <TagsTable 
        searchTerm={searchTerm} 
        visibleColumns={visibleColumns}
        tracks={mockTracks}
        loading={false}
        updateTrack={dummyUpdateTrack}
      />
    </>
  )
}

export default withWidth()(TagsList)
